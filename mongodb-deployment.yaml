# MongoDB PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  labels:
    app: mongodb
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:6
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_DATABASE
          value: "donatebooks"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: init-script
        configMap:
          name: mongodb-init-script

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  labels:
    app: mongodb
spec:
  selector:
    app: mongodb
  ports:
  - name: mongodb
    port: 27017
    targetPort: 27017
    protocol: TCP
  type: ClusterIP

---
# MongoDB Initialization Script
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-script
  labels:
    app: mongodb
data:
  init.js: |
    // Switch to donatebooks database
    db = db.getSiblingDB('donatebooks');
    
    print("🔄 Initializing donatebooks database...");
    
    // Create collections
    db.createCollection("users");
    db.createCollection("books");  
    db.createCollection("swaps");
    db.createCollection("achievements");
    db.createCollection("messages");
    db.createCollection("notifications");
    db.createCollection("pickups");
    db.createCollection("ratings");
    db.createCollection("genres");
    
    print("✅ Collections created successfully!");
    
    // Create indexes for performance
    
    // Users collection indexes
    try {
      db.users.createIndex({ "username": 1 }, { "unique": true });
      db.users.createIndex({ "email": 1 }, { "unique": true });
      db.users.createIndex({ "location": 1 });
      db.users.createIndex({ "totalPoints": -1, "level": -1 });
      db.users.createIndex({ "favoriteGenres": 1 });
      db.users.createIndex({ "isActive": 1, "lastLoginAt": -1 });
      print("✅ Users indexes created");
    } catch (e) {
      print("⚠️ Users indexes: " + e);
    }
    
    // Books collection indexes
    try {
      db.books.createIndex({ "title": "text", "author": "text", "genre": "text" });
      db.books.createIndex({ "genre": 1, "averageRating": -1 });
      db.books.createIndex({ "userId": 1, "status": 1 });
      db.books.createIndex({ "createdAt": -1 });
      db.books.createIndex({ "isFeatured": 1, "featuredUntil": 1 });
      print("✅ Books indexes created");
    } catch (e) {
      print("⚠️ Books indexes: " + e);
    }
    
    // Messages collection indexes
    try {
      db.messages.createIndex({ "senderId": 1, "receiverId": 1, "createdAt": -1 });
      db.messages.createIndex({ "receiverId": 1, "isRead": 1 });
      print("✅ Messages indexes created");
    } catch (e) {
      print("⚠️ Messages indexes: " + e);
    }
    
    // Notifications collection indexes
    try {
      db.notifications.createIndex({ "userId": 1, "isRead": 1, "createdAt": -1 });
      db.notifications.createIndex({ "userId": 1, "type": 1 });
      print("✅ Notifications indexes created");
    } catch (e) {
      print("⚠️ Notifications indexes: " + e);
    }
    
    // Achievements collection indexes
    try {
      db.achievements.createIndex({ "userId": 1, "badge": 1 }, { "unique": true });
      print("✅ Achievements indexes created");
    } catch (e) {
      print("⚠️ Achievements indexes: " + e);
    }
    
    // Ratings collection indexes
    try {
      db.ratings.createIndex({ "bookId": 1, "userId": 1 }, { "unique": true });
      print("✅ Ratings indexes created");
    } catch (e) {
      print("⚠️ Ratings indexes: " + e);
    }
    
    print("🎉 Database initialization completed!");
    print("📊 Collections in donatebooks:");
    db.getCollectionNames().forEach(name => print("- " + name));
